<link rel="stylesheet" href="{{ 'owl.carousel.min.css' | asset_url }}" type="text/css">
<link rel="stylesheet" href="{{ 'owl.theme.default.min.css' | asset_url }}" type="text/css">

<style>
  .recomended-products___container{
    padding-top: 20px;
    padding-bottom: 20px;
    border-top: 1px solid #DEDEDE !important;
  }

  .recommended-product {
    display: grid;
    grid-template-columns: 128px 1fr;
    gap: 10px;
    align-items: center;
    border: 1px solid #9E9E9E;
    padding: 13px 15px;
  }

  .product-image img {
    max-width: 100%;
    border-radius: 8px;
  }

  .product-info__box {
    display: flex;
    flex-direction: column;
    gap: 10px;
  }

  .product-info__box  * {
       padding: 0px;
       margin: 0px;
  }
  .recommended-product .product-title {
    font-size: 1.4rem;
    margin: 0px;
    color: #313131 !important;
  }
  .recommended-product .product-title a {
    text-decoration: none;

    color: #313131
  }
  .recommended-product .product-title a:hover {
    text-decoration: underline !important;

    color: #313131
  }

  .recommended-product .product-price {
    color: #373737;
    font-size: 1.4rem;
    line-height: 1;
  }

  .recommended-product .swatch-container {
    display: flex;
    gap: 8px;
  }

  .recommended-product .swatch {
    height: 18px;
    width: 18px;
    border-radius: 50%;
    border: 1px solid #ddd;
    cursor: pointer;
    transition: transform 0.2s, border-color 0.2s;
    display: block !important;
  }

  .recommended-product .swatch:hover {
    transform: scale(1.1);
    border-color: #000;
  }

  .recommended-product .swatch.selected {
    border-color: #000;
  }

  .product-info__box  .add-to-cart {
    padding: 10px;
    background-color: #000;
    color: white;
    border: none;
    border-radius: 5px;
    cursor: pointer;
    font-size: 16px;
    font-weight: 700;
    height: 42px;
    max-width: 147px;
    font-family: 'Roboto';
  }

  .product-info__box  .add-to-cart:hover {
    background-color: #0056b3;
  }
  .recomended-products___container {
    overflow: hidden;
  }
  .recomended-products__title {
    font-size: 14px;
    margin-top: 0px;
    margin-bottom: 15px;
  }
</style>

{% assign collection = collections[settings.cart_drawer_reomendation_products] %}
<div class="recomended-products___container">
    <h2 class="recomended-products__title">you might also like</h2>
<div class="owl-carousel recommended-products">
  {% for product in collection.products %}
    <div class="recommended-product">

      <!-- Product Image -->
      <div class="product-image">
        <a href="{{ product.url }}">
        <img src="{{ product.featured_image | img_url: 'medium' }}" alt="{{ product.title }}">
        </a>
      </div>

      <!-- Product Information -->
      <div class="product-info__box">
        <div>
        
        {%- if  product.metafields.reviews.rating.value != blank -%}
          {% liquid
            assign rating_decimal = 0
            assign decimal = product.metafields.reviews.rating.value.rating | modulo: 1
            if decimal >= 0.3 and decimal <= 0.7
              assign rating_decimal = 0.5
            elsif decimal > 0.7
              assign rating_decimal = 1
            endif
          %}
          <div class="rating-container">
          <div
            class="rating"
            role="img"
            aria-label="{{ 'accessibility.star_reviews_info' | t: rating_value: product.metafields.reviews.rating.value, rating_max: product.metafields.reviews.rating.value.scale_max }}"
          >
            <span
              aria-hidden="true"
              class="rating-star-color color-icon-{{ settings.accent_icons }}"
              style="--rating: {{ product.metafields.reviews.rating.value.rating | floor }}; --rating-max: {{ product.metafields.reviews.rating.value.scale_max }}; --rating-decimal: {{ rating_decimal }};"
            ></span>
          </div>

          <p class="rating-count caption">
            <span aria-hidden="true">({{ product.metafields.reviews.rating_count }})</span>
            <span class="visually-hidden">
              {{- product.metafields.reviews.rating_count }}
              {{ 'accessibility.total_reviews' | t -}}
            </span>
          </p>
          </div>
        {%- endif -%}
      <h2 class="product-title">  <a href="{{ product.url }}">{{ product.title }}</a></h2> 
        </div>
        <p class="product-price">{{ product.price | money }}</p>

        <!-- Color Swatches -->
        {% if product.variants.size > 1 %}
          <div class="swatch-container" data-product-id="{{ product.id }}">
            {% for variant in product.variants limit: 5 %}
              <div
                class="swatch"
                data-variant-id="{{ variant.id }}"
                style="background: {{ variant.metafields.color.value }}"
                title="{{ variant.title }}"
              ></div>
            {% endfor %}
          </div>
        {% endif %}

        <!-- Add to Cart Button -->
        <button class="add-to-cart" data-product-id="{{ product.variants.first.id }}">
          Add
        </button>
      </div>

    </div>
  {% endfor %}
</div>
</div>
<script src="{{'owl.carousel.min.js'|asset_url}}" defer="defer"></script> 

<script>

document.addEventListener('DOMContentLoaded', function () {
  // Initialize Owl Carousel
  $('.recommended-products').owlCarousel({
    items: 1, // Number of items to display
    loop: true,
    margin: 10,
    nav: false,
    dots: false,
    responsive: {
      0: { items: 1 },
      600: { items: 1 },
      1000: { items: 1.1 }
    }
  });

  document.addEventListener('click', function (event) {
    if (event.target.matches('.swatch')) {
      const swatch = event.target;
      const container = swatch.closest('.swatch-container');
      const productId = container.dataset.productId;

      container.querySelectorAll('.swatch').forEach((s) => s.classList.remove('selected'));
      swatch.classList.add('selected');
      const addToCartButton = container.closest('.recommended-product').querySelector('.add-to-cart');
      addToCartButton.dataset.productId = swatch.dataset.variantId;
    }
  });

  document.addEventListener('click', function (event) {
    if (event.target.matches('.add-to-cart')) {
      const button = event.target;
      const variantId = button.dataset.productId;

      fetch('/cart/add.js', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ id: variantId, quantity: 1 })
      })
        .then((response) => response.json())
        .then(() => {
          console.error('Product Added to cart');
        })
        .catch((error) => {
          console.error('Error adding to cart:', error);
        });
    }
  });
});

</script>